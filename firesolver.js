// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('holmesal.firesolver', ['firebase']).service('Firesolver', function($rootScope, $firebase, $firebaseSimpleLogin, $q, $timeout) {
    var Firesolver;
    Firesolver = (function() {
      function Firesolver() {
        var auth;
        if (!$rootScope.firebaseURL) {
          console.error("<firesolver> Firebase URL not set - use firesolverProvider.config() or set $rootScope.firebaseURL to do this");
        }
        this.emptyUser = false;
        this.reset();
        this.rootRef = new Firebase($rootScope.firebaseURL);
        auth = new FirebaseSimpleLogin(this.rootRef, (function(_this) {
          return function(err, authUser) {
            if (err) {
              console.error('<firesolver> There was an error getting the authUser from firebase');
              return _this.deferredAuthUser.reject(err);
            } else if (authUser) {
              console.log('<firesolver> user is logged in!');
              $rootScope.authUser = authUser;
              return _this.deferredAuthUser.resolve(authUser);
            } else {
              console.log('<firesolver> user is NOT logged in!');
              $rootScope.authUser = null;
              $rootScope.user = null;
              return _this.deferredAuthUser.reject('User is NOT logged in!');
            }
          };
        })(this));
      }

      Firesolver.prototype.reset = function() {
        console.log('<firesolver> resetting promises');
        this.deferredUser = $q.defer();
        this.deferredAuthUser = $q.defer();
        return this.deferUser();
      };

      Firesolver.prototype.deferUser = function() {
        return this.deferredAuthUser.promise.then((function(_this) {
          return function(authUser) {
            var userRef;
            console.log('<firesolver> deferred auth user resolved successfully!');
            userRef = _this.rootRef.child('users').child(authUser.username);
            $rootScope.user = $firebase(userRef);
            return $rootScope.$watch('user', function(user) {
              if (user) {
                console.log('<firesolver> resolving user promise!');
                return _this.deferredUser.resolve(user);
              }
            });
          };
        })(this), (function(_this) {
          return function(err) {
            console.log('<firesolver> deferred auth user rejected!');
            _this.deferredUser.resolve(null);
            _this.emptyUser = true;
            return _this.reset();
          };
        })(this));
      };

      Firesolver.prototype.authenticate = function() {
        if ($rootScope.authUser) {
          return $rootScope.authUser;
        } else {
          return this.deferredAuthUser.promise;
        }
      };

      Firesolver.prototype.currentUser = function() {
        if ($rootScope.user || this.emptyUser) {
          console.log('returning user');
          console.log($rootScope.user);
          return $rootScope.user;
        } else {
          console.log('returning user promise');
          return this.deferredUser.promise;
        }
      };

      Firesolver.prototype.get = function(path) {
        var deferredGet, getRef;
        deferredGet = $q.defer();
        getRef = this.rootRef.child(path);
        getRef.on('value', function(snapshot) {
          var getItem;
          getItem = snapshot.val();
          if (getItem) {
            return deferredGet.resolve($firebase(getRef));
          } else {
            return deferredGet.reject("<firesolver> No data found at " + path);
          }
        }, function(err) {
          return deferredGet.reject("<firesolver> Error getting data from location " + path);
        });
        return deferredGet.promise;
      };

      return Firesolver;

    })();
    return new Firesolver;
  });

}).call(this);
